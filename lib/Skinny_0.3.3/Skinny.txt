

|o×o| - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - |o×o|
|o×o|                                                                   |o×o|
|o×o|             日本発のPHPテンプレートエンジン - Skinny              |o×o|
|o×o|                                                                   |o×o|
|o×o| - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - |o×o|



■ Skinnyとは


    Skinnyは 「シンプルであること」 をコンセプトとし、比較的小規模な実務で
    十分に耐え得る機能を１ファイルで提供する、PHPの高速テンプレートエンジンです。




■ Skinnyの特徴


  ▼ １ファイル実装 ＝ 最高のシンプル
    
    Skinnyのコンセプトは 「シンプルであること」。
    開発現場で使われない機能は極力省き、使用頻度の高い機能に的を絞って開発されています。
    
    １ファイルで実務業務に耐えうる機能を凝縮した 「コンパクトさ」
    ファイルをコピーするだけで済む 「設置のしやすさ」
    既存のPHPプログラムにそのまま組み込める 「導入のしやすさ」
    最小限の機能しか載せていないための 「覚えやすさ」 
    
   を実現しています。


  ▼ 強力なキャッシュ機能
    
    Skinnyにはシンプルであると同時に 『とにかく速く』 という第２のコンセプトがあります。
    一度実行された処理を、リクエストされる度に処理する事はとても非効率です。
    
    Skinnyには一度展開されたテンプレートをキャッシュとして保持する機能が標準で備わっています。
    このキャッシュ機能利用時には、非使用時と比べ単純使用時で２倍。
    複雑な処理を行う場合で、10倍以上の表示速度を展開速度を実現しました。


  ▼ 柔軟なプラグイン機能
    
    Skinnyには利用頻度が低いと思われる機能は実装しません。
    10案件に1回。100案件に数回しか使われない機能を標準で搭載するのは「無駄」と考えるからです。
    しかし、稀に必要とされるその要求に応えられなければ、実務で利用され続ける事は不可能でしょう。
    
    Skinnyは「プラグイン機能」により、ユーザーが自由に機能を追加する事が可能です。
    この機能を搭載することで、Skinnyは必要最低限の機能を絞り込んで実装し、
    不要と思われる機能を大胆に切り捨てるコンセプトを保つ事が実現出来ています。
    
    過去に追加されたプラグインは、そのままあなたとSkinnyの財産となります。
    それは、あなたの経験や実績と共に、Skinnyも同じく成長し続けることを意味します。


  ▼ Smarty互換の修飾子
    
    Skinnyの起源はRaidenと呼ばれるテンプレートエンジンですが、世界でもっとも使われている
    テンプレートエンジンは恐らくSmartyと言って過言ではないでしょう。
    
    この世界で最も利用されエンジニアの多くが慣れ親しんだSmartyの出力修飾子を、
    Skinnyはそのまま利用することが出来ます。
    
    少しの学習コストで最大限の効果のある機能をSkinnyはその内に秘めています。


  ▼ 自由な文字エンコード
    
    Skinnyは標準ではUTF-8でコーディングされ、利用環境もUTF-8を推奨していますが、
    どうしても文字エンコードを違うものに指定しなくてはならない場面もあるでしょう。
    
    Skinnyでは「PHP内部の処理コード／テンプレートファイルの文字コード／出力したい文字コード」を
    それぞれ自由に設定する事が出来ます。
    
    例えば「PHP内部コードがEUC、HTMLファイルはUTF8、しかし画面出力はSJISで。」といった要求にも
    柔軟に対応する事が可能です。


  ▼ テンプレートブロック機能
    
    Skinnyは主に動的なWeb表示を目的として制作されています。
    Webサイトには必ずといって良いほど「共通につかう部分的なパーツ」が存在します。
    ヘッダー、フッター、サイドメニューバー、バナー広告部などがそれにあたります。
    
    Skinnyでは、そういった「他のページでも共通して使う」部分を「共通テンプレート」と定義し、
    メインのテンプレートから共通テンプレートを呼び出して利用する機能が搭載されています。
    
    この機能により、共通テンプレート１枚を修正するだけで、それを利用している全てのページに
    修正内容を反映させる事ができ、あなたの作業負担を大幅に軽減する事が出来ます。




■ Skinnyの動作環境


  PHP5以上が動作する環境（LAMPのUTF8環境を推奨）




■ Skinny の配布ファイル一式


  Skinny.zip
   ├ Skinny.php  - Skinnyテンプレートエンジン本体
   ├ Skinny.txt  - 今お読みになっているこのファイル
   └ /example
      ├ example01.php    - サンプル01 PHPプログラム
      ├ example01.html   - サンプル01 テンプレート
      ├ example02.php    - サンプル02 PHPプログラム
      ├ example02.html   - サンプル02 テンプレート
      └ example02ex.html - サンプル02 共通テンプレート




■ 設置方法


  (1) Skinny.php をPHPからアクセスできるディレクトリに配置してください。
      理想はドキュメントルートより上の階層ですが、ドキュメントルート下でも問題はありません。
      配置したディレクトリのパーミッションを 777（707)に設定しておいてください。
      ドキュメントルート直下に置く場合は、ドキュメントルート自体のパーミッションを変更します。
      例：  .../(DocumentRoot)/Libs/Skinny.php
      (この時、Libsのパーミッションを 777 (707) に設定)
  
  以上で設置は完了です。
  どうですか？ 難しかったですか？




■ 利用方法


  (1) それではまず最初に、Skinnyを利用するプログラムを作成します。
      ここでは取りあえずのサンプルなので index.php にします。
      
           1| <?php
           2|     // Skinny 呼び出し
           3|     include_once( "./Libs/Skinny.php" );
           4|     // Skinnyへ渡す配列宣言（$out）
           5|     $out = array( 'title_str' => 'Skinny in my life.' );
           6|     // さらに出力内容をどんどん追加
           7|     $sex = 'male';
           8|     $out['my_sex'] = $sex;      // 性別とか
           9|     $out['unixtime'] = time();  // 現在時刻とか
          10|     $out['error_message'] = "エラーはありません\n";   // メッセージとか
          11|     // Skinnyで出力
          12|     $Skinny->SkinnyDisplay( 'template.html', $out );
          13| ?>
      
      
      
      (1-1) 3行目
      
        ※ 先ほど【設置方法】で配置した "./Libs/Skinny.php" として話を進めますので、
           配置した場所が違う場合は、ご自身の環境に置き換えて読み進めてください。
      
      Skinnyを利用したい場合は、skinny.phpを読み込んでしまえば準備完了です。
      これでSkinnyは内部で実行され、Skinnyクラスのインスタンスが生成された状態になります。
      
      
      
      (1-2) 5行目
      
      テンプレートで出力したい値を変数に入れている部分です。
      Skinnyでは表示させる為のデータを「連想配列」として最後にまとめてSkinnyへ渡します。
      
      作者はテンプレートへ出力する値を保持する配列名に「$out」を良く使いますので、
      ここでは $out を配列で宣言し、ついでに出力したい文字列を入れています。
      
      ごく一般的なPHPのコーディングで、真新しい事は何もありません。
      Smartyのように、出力したい内容を逐一 $smarty->assign() 等と面倒な事は行いません。
      
      後はindex.php 内で必要な処理を行いつつ、出力したい値があったらどんどん$outへ入れていきます。
      
      
      
      (1-3) 7～10行目
      
      さぁ、どんどん入れていきます。
      ここでは、後ほどの説明のために「性別」「現在日時のUNIXTIME値」「メッセージ」を入れています。
      どうしてUNIXTIMEの値なのか？ その理由は後ほど触れますので、ここでは気にしないようにします。
      
      
      
      (1-4) 12行目
      
      それではいよいよテンプレートへ値を渡してみましょう。
      
      この行は先ほどの「$out」の内容を「template.html」を使って出力しなさい。という命令になります。
      Skinnyを利用する場合、恐らくこの SkinnyDisplay が最も使われる事になります。
      
      これで index.php への導入は終了です。
      どうですか？ 難しかったでしょうか？
      
      あなたがプログラム側で覚える事は「$Skinny->SkinnyDisplay」と言う、たった一つの命令だけです。
      
      
      
  (2) それでは次に、テンプレートを作成します。
      
      先ほどSkinnyDisplayで指定した「template.html」を新しく作ります。
      
           1| <html>
           2| <head>
           3| <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
           4| <title><% echo(title_str) %></title>
           5| </head>
           6| <body>
           7| 
           8| 現在、<% dval(unixtime,'Y/m/d H:i:s') %>です。<br />
           9:
          10| 私の性別は
          11| <% if(my_sex,==,'male') %>
          12|   <font color="BLUE">男</font>です。
          13| <% elseif(my_sex,==,'female') %>
          14|   <font color="RED">女</font>です。
          15| <% else %>
          16|   良く分かりません。
          17| <% /if %>
          18| <br />
          19| 
          20| <% echo(error_message) %>
          21| 
          22| </body>
          23| </html>
      
      
      (4-1) 3行目
      
      <% echo(title_str) %> と書かれている部分がありますね。
      この <% ～ %> で囲まれた部分が、Skinnyの展開タグと呼ばれる独特の書式です。
      この場合は echo(～～）となっているので、echoタグと呼んでいます。
      
      そして、勘の良い方ならもう大体の察しが付いたことでしょう。
      
      echo(title_str) とは、$out['title_str'] の内容に置き換えなさいという命令です。
      その title_str というのは、index.phpの5行目に書いた "Skinny in my life." の事です。
      
      これは Skinny内部で <?php echo $out['title_str']; ?> に置き換えられます。
      （実際はもう少し複雑ですが…）
      
      最終的にこの部分は展開され <title>Skinny in my life.</title> となるわけです。
      
      これが基本的なテンプレートエンジンの使い方になります。
      
      尚、echoタグには変数の内容を操作して出力するためのオプションが多くあり、
      Smaryの修飾子と同等の機能をそのまま搭載しています。
      
        ・XSSなどの危険なタグを無害化して出力する機能。
        ・URLのリンクをAリンクに置き換えて出力する機能。
        ・URLのパラメータ用に値をURLエンコードして出力する機能。
        ・連続した数値を３桁毎にカンマを挿入して出力する機能。
      
      など、他にもたくさんの修飾子を用意していますので、安心なWebサイトの構築にもしっかり対応できます。
      
      
      (4-2) 7行目
      
      <% dval(unixtime,'Y/m/d H:i:s') %> は、dvalタグと呼ばれます。
      dval とは date value の略で、日付出力に特化したタグです。
      
      先ほど index.php の 9行目で $out['unixtime'] = time(); を代入しました。
      もう誰が見ても、UNIXTIMEの値を YYYY/MM/DD hh:mm:ss 形式で出力しなさいという事です。
      そして内部で <?php date('Y/m/d H:i:s',$out['unixtime']); ?> が実行される事も容易に想像できますね。
      
      もちろん、date関数に渡されるという事は、下記の様な日付形式で出力する事も可能です。
      dval(unixtime,'Y年n月j日') とすれば、2011年2月27日 の様に出来ますし、
      dval(unixtime,'F j, Y, g:i a') とすれば、March 02, 2011, 7:24 pm の様に出力も出来ます。
      
      先ほど (1-3) でUNIXTIMEの値を入れたのは、テンプレート側で自由にフォーマットが変更出来るからです。
      データベースと連携したシステムでは、DBのTIMESTAMP値がよく使われたりしますが、これらを一度
      UNIXTIME値として取り出しておけば、後の細かい表記修正はテンプレートだけで済むようになります。
      
      これはSkinny利用では意外と使用頻度の高いタグですので是非覚えてください。
      （なぜ date() ではなく、dval() になったのか、その歴史は別の機会で説明します）
      
      
      (4-3) 11～17行目
      
      さて、今までは単純に変数の値を出力するだけでした。
      テンプレートエンジンと呼ばれる全てのエンジンが絶対に備えている機能です。
      
      次は少し複雑な「ロジック」と呼ばれるプログラムっぽい処理の記述です。
      この辺の機能からは、プログラムの「処理」にあたるため、そもそもテンプレートエンジンが
      備えるべき機能なのかという意味で、エンジニアによって賛否両論です。
      また、１ファイルの小型テンプレートエンジンでは、このロジック系を潔く排除しているものも見かけます。
      
      本来はモジュール側、つまりプログラム側で処理を行うべきものなのですが、Skinnyではテンプレート側でも
      ある程度のロジックを記述は必要との判断で実装されています。
      
      それでは 11行目から見て行きましょう。
      と思ったのですが、Skinnyを使おうと思っている方は、それなりにPHPの心得もあるでしょう。
      ですので、展開後のPHPを書いた方が分かりやすいと思うので、そうする事にします。
          
          11| <?php if($out['my_sex'] == 'male') { %>
          12|   <font color="BLUE">男</font>です。
          13| <?php }elseif($out['my_sex'] == 'female'){  %>
          14|   <font color="RED">女</font>です。
          15| <?php }else{ ?>
          16|   良く分かりません。
          17| <?php } ?>
          
      どうでしょうか？
      
        11行目 my_sex が 'male' だったら「男」と表示。
        13行目 そうでなく my_sex が 'female' だったら「女」と表示、
        15行目 それでも違えば「分からない」と表示。
        17行目 この一連の処理ブロックは終了。
      
      以上を行う処理になります。
      
      
      何度も言いますが、本来テンプレートエンジンではこれらの処理をモジュール側（プログラム側）で行い、
      表示すべき結果のみを、テンプレートエンジンに渡すべきです。（世間で言うMVCの本髄はそこのはずなので）
      
      しかし、モジュール側でそれを行う場合、上記の例の様に「男女で色を分けて表示する」など、
      デザインに絡む変更があった場合に、その都度モジュール側を変更する必要が出てきます。
      それらを鑑みてSkinnyでは「多少の処理ロジックをテンプレート側で記述できるべき」と判断しました。
      
      尚、Skinnyが持つ処理系のタグは他にもありますが、大きく分けて下記の５種類だけです。
      ５種覚えるだけで、Skinnyの処理は９割マスター出来ると言って過言ではありません。
      
        条件分岐              変数操作     繰り返し     差し込み     追加処理
        if ifs def ifeven     var calc     each for     external     plugin
      
      
      
  (3) それでは実行してみましょう。
      
      先ほど(1)で作成した index.php にブラウザからアクセスしてください。
      
      > 現在、2011/03/08 12:34:56です。
      > 私の性別は 男です。
      > エラーはありません
      
      問題が無ければこのように表示されるはずです。
      
      あとはもっとデザインされたHTMLに自由に組み込んで、色々とカット＆トライで試してください。
      今回の説明でSkinnyの魅力は１割も伝わっていないと思いますので…
      
      
      
  (4) もっと高みを！
      
      Skinnyの動作を知るためにはSkinny.phpを読むのが一番早いでしょう。
      しかしそこまで分からなくても、タグがどのように展開されるのかだけ知っておくのも
      今後Skinnyを利用する上で十分価値のある知識です。
      
      Skinnyには「キャッシュ生成」という機能があります。
      この機能は標準では無効になっているので、是非この機能を有効にしてキャッシュフォルダを覗いて見てください。
      
      テンプレートエンジンが、中間でどのようなコードを生成しているのか分かると思います。
      
      また、このコードを知ることで、展開タグ以外の上級なプラグインを作る事も可能です。
      
      Skinnyテンプレートからデータベースを操作したい！
      Skinnyテンプレートからセッションを操作したい！
      Skinnyに画像リサイズ機能を追加したい！
      Skinnyに絵文字変換機能を追加したい！
      
      ここまで不満が出るようになったあなたは、もはやSkinnyでは満足出来ないハズです。
      
      
      
  (5) フレームワーク内包テンプレートエンジン【Raiden】へ。
      
      Skinnyは１ファイルで速く！がコンセプトなので、ゴテゴテと機能追加するのは美しくありません。
      
      そのレベルまできた方には、是非「 Raiden 」のご利用をお勧めします。
      Raiden とはフレームワーク内包のテンプレートエンジンで、その中身はMVCモデルですが、
      現在のMVCモデルと呼ばれるものとは考え方が根本から正反対に違います。
      
      ブラウザから本来アクセスされるべき HTML（テンプレート）。
      Raidenではこれを「コントローラ」と考えます。
      そのページ生成に必要な情報は、テンプレートからモジュールとして実行し、その結果を必要な
      場所に展開していくという、完全に「デザイナ」主点で開発されたテンプレートエンジンです。
      
      
      エンジニアは黙ってその要求に応えるモジュールを作ればいい。
      
      
      コントローラありきの今のMVCモデルを過去のものにする、画期的なフレームワークを体験してください。
      
      そして、あなたが Skinny で蓄えた知識は Raiden でそのまま活用する事が出来ます。
      Skinnyのタグ表記は Raidenを完全踏襲しているので、何も考えずそのまま移行出来るでしょう。
      
      
      また、Skinnyでは不要と判断され省かれたタグも、Riadenには数多く揃っています。
      
      おそらくあなたがSkinnyに不満を感じ、実装しようと試みた全ての機能が揃っていると確信します。
      
      




＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿
 o  o  o  o  o  o  o  o  o  o  o  o  o  o  o  o  o  o  o  o  o  o  o  o  o  o  o  o  o  o  o  o  o  o 
￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣
|  |／＼|  |
|○|    |○|  Skinny document wrote by Junichi Sasaki.  since 2011.02.28
|  |＼／|  |                      Handle name Kuasuki.
|  |／＼|  |                                            on Skinny version 0.1.6
|○|    |○|
|  |＼／|  |
|  |／＼|  |  This template engine development on Apache + PHP5 with Linux.
|○|    |○|
|  |＼／|  |  Linux version is VineLinux 4.2 on x86.
|  |／＼|  |
|○|    |○|
|  |＼／|  |  Special thanks  :  Keisuke Asakawa ( PHP Template engine 'Simpley' author )
|  |／＼|  |
|○|    |○|                  :  Raiden project ( PHP Template engine 'Raiden' author team )
|  |＼／|  |
|  |／＼|  |                  :  PHP.net ( all PHP developpers )
|○|    |○|
|  |＼／|  |                  :  and You ...
|  |／＼|  |
＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿
 o  o  o  o  o  o  o  o  o  o  o  o  o  o  o  o  o  o  o  o  o  o  o  o  o  o  o  o  o  o  o  o  o  o 
￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣
